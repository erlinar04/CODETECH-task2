package com.example.notetakingapp;

import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    private Button addNoteButton, saveButton;
    private ListView noteListView;
    private EditText titleInput, contentInput;
    private ArrayAdapter<String> adapter;
    private ArrayList<String> noteTitles;
    private NoteDatabaseHelper dbHelper;
    private String originalTitle = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        titleInput = findViewById(R.id.titleInput);
        contentInput = findViewById(R.id.contentInput);
        addNoteButton = findViewById(R.id.addNoteButton);
        saveButton = findViewById(R.id.saveButton);
        noteListView = findViewById(R.id.noteListView);

        dbHelper = new NoteDatabaseHelper(this);
        noteTitles = dbHelper.getAllNoteTitles();
        adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, noteTitles);
        noteListView.setAdapter(adapter);

        addNoteButton.setOnClickListener(v -> {
            titleInput.setText("");
            contentInput.setText("");
            originalTitle = null;
            findViewById(R.id.noteEditorLayout).setVisibility(View.VISIBLE);
        });

        saveButton.setOnClickListener(v -> saveNote());

        noteListView.setOnItemClickListener((parent, view, position, id) -> {
            originalTitle = noteTitles.get(position);
            titleInput.setText(originalTitle);
            contentInput.setText(dbHelper.getNoteContent(originalTitle));
            findViewById(R.id.noteEditorLayout).setVisibility(View.VISIBLE);
        });

        noteListView.setOnItemLongClickListener((parent, view, position, id) -> {
            String title = noteTitles.get(position);
            dbHelper.deleteNoteByTitle(title);
            noteTitles.remove(position);
            adapter.notifyDataSetChanged();
            Toast.makeText(this, "Note deleted", Toast.LENGTH_SHORT).show();
            return true;
        });
    }

    private void saveNote() {
        String title = titleInput.getText().toString().trim();
        String content = contentInput.getText().toString().trim();

        if (title.isEmpty() || content.isEmpty()) {
            Toast.makeText(this, "Title and Content cannot be empty", Toast.LENGTH_SHORT).show();
            return;
        }

        if (originalTitle != null && !originalTitle.equals(title)) {
            dbHelper.updateNoteTitle(originalTitle, title);
        }

        dbHelper.addOrUpdateNote(title, content);
        if (!noteTitles.contains(title)) {
            noteTitles.add(title);
        }
        adapter.notifyDataSetChanged();
        findViewById(R.id.noteEditorLayout).setVisibility(View.GONE);
        Toast.makeText(this, "Note saved", Toast.LENGTH_SHORT).show();
    }

    private static class NoteDatabaseHelper extends SQLiteOpenHelper {

        private static final String DATABASE_NAME = "notes.db";
        private static final int DATABASE_VERSION = 1;
        private static final String TABLE_NAME = "notes";
        private static final String COLUMN_TITLE = "title";
        private static final String COLUMN_CONTENT = "content";

        public NoteDatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            String createTable = "CREATE TABLE " + TABLE_NAME + " (" +
                    COLUMN_TITLE + " TEXT PRIMARY KEY, " +
                    COLUMN_CONTENT + " TEXT)";
            db.execSQL(createTable);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME);
            onCreate(db);
        }

        public void addOrUpdateNote(String title, String content) {
            SQLiteDatabase db = this.getWritableDatabase();
            ContentValues values = new ContentValues();
            values.put(COLUMN_TITLE, title);
            values.put(COLUMN_CONTENT, content);
            db.insertWithOnConflict(TABLE_NAME, null, values, SQLiteDatabase.CONFLICT_REPLACE);
            db.close();
        }

        public String getNoteContent(String title) {
            SQLiteDatabase db = this.getReadableDatabase();
            Cursor cursor = db.query(TABLE_NAME, new String[]{COLUMN_CONTENT}, COLUMN_TITLE + "=?", new String[]{title}, null, null, null);
            if (cursor != null && cursor.moveToFirst()) {
                String content = cursor.getString(0);
                cursor.close();
                db.close();
                return content;
            }
            return null;
        }

        public ArrayList<String> getAllNoteTitles() {
            ArrayList<String> titles = new ArrayList<>();
            SQLiteDatabase db = this.getReadableDatabase();
            Cursor cursor = db.query(TABLE_NAME, new String[]{COLUMN_TITLE}, null, null, null, null, null);
            while (cursor.moveToNext()) {
                titles.add(cursor.getString(0));
            }
            cursor.close();
            db.close();
            return titles;
        }

        public void deleteNoteByTitle(String title) {
            SQLiteDatabase db = this.getWritableDatabase();
            db.delete(TABLE_NAME, COLUMN_TITLE + " = ?", new String[]{title});
            db.close();
        }

        public void updateNoteTitle(String oldTitle, String newTitle) {
            SQLiteDatabase db = this.getWritableDatabase();
            ContentValues values = new ContentValues();
            values.put(COLUMN_TITLE, newTitle);
            db.update(TABLE_NAME, values, COLUMN_TITLE + " = ?", new String[]{oldTitle});
            db.close();
        }
    }
}
